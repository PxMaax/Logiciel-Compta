name: New Release

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Type of release:'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
 
permissions:
  contents: write
  issues: write

jobs:
  build :
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 

      - name: Build Application with PyInstaller
        run: pyinstaller main.spec

      - name: Build Updater with PyInstaller
        run: pyinstaller --onefile updater.py

      - name: Archive Application Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Application - Feuilles de caisses
          path: ./dist/main.exe

      - name: Archive Updater Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Updater - Feuilles de caisses
          path: ./dist/updater.exe 

  release :   
    needs: build   
    runs-on: ubuntu-latest
    steps:
      - name: Generate new version based on input
        run: |
          if ! latest_tag=$(git describe --tags --abbrev=0 2>/dev/null); then
            echo "No tags found. Setting a default tag."
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          major=$(echo "$latest_tag" | cut -d '.' -f 1 | sed 's/v//')
          minor=$(echo "$latest_tag" | cut -d '.' -f 2)
          patch=$(echo "$latest_tag" | cut -d '.' -f 3)
          
          case "${{ github.event.inputs.release }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
            *)
              echo "Invalid input. No version change."
              exit 1
              ;;
          esac
          
          new_tag="v${major}.${minor}.${patch}"
          echo "New tag: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
        shell: bash

      - name: save new tag
        run: echo ${{ env.NEW_TAG }} > current_version.txt   

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
          body: Description of the release
          draft: false
          prerelease: false


      - name: Upload Main Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/main
          asset_name: main.exe
          asset_content_type: application/octet-stream

      - name: Upload Updater Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/updater 
          asset_name: updater.exe 
          asset_content_type: application/octet-stream
