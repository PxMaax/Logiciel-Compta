name: Auto Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Etape pour vérifier le message de commit
      - name: Check Commit Message for 'nouvelle version'
        id: commit_filter
        run: |
          echo "Checking for 'nouvelle version' in the commit message..."
          if git log -1 --pretty=%B | grep -iq "nouvelle version"; then
            echo "SHOULD_RUN=true" >> $GITHUB_ENV
            echo "Le message du commit posssede : nouvelle version."
          else
            echo "SHOULD_RUN=false" >> $GITHUB_ENV
            echo "Le workflow ne va pas creer de release."
          fi
      - name: Set up Python
        if: env.SHOULD_RUN == 'true'
        uses: actions/setup-python@v2
        with:
          python-version: '3.12.2'

      # Installation des dépendances Python
      - name: Install dependencies
        if: env.SHOULD_RUN == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Application with PyInstaller
        if: env.SHOULD_RUN == 'true'
        run: pyinstaller main.spec

      # Archivage de l'exécutable
      - name: Archive Production Artifacts
        if: env.SHOULD_RUN == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: Logiciel Feuilles de caisses 
          path: dist/main/


      - name: Generate new version based on commit message
        if: env.SHOULD_RUN == 'true'
        run: |
          if ! latest_tag=$(git describe --tags --abbrev=0 2>/dev/null); then
            echo "No tags found. Setting a default tag."
            latest_tag="v0.0.0"
          fi
          echo "Latest tag: $latest_tag"
          major=$(echo "$latest_tag" | cut -d '.' -f 1 | sed 's/v//')
          minor=$(echo "$latest_tag" | cut -d '.' -f 2)
          patch=$(echo "$latest_tag" | cut -d '.' -f 3)
          commit_message=$(git log -1 --pretty=%B)
          
          if echo "$commit_message" | grep -iq "majeure"; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "$commit_message" | grep -iq "mineure"; then
            minor=$((minor + 1))
            patch=0
          elif echo "$commit_message" | grep -iq "patch"; then
            patch=$((patch + 1))
          fi
          new_tag="v${major}.${minor}.${patch}"
          echo "New tag: $new_tag"
          echo "NEW_TAG=$new_tag" >> $GITHUB_ENV
        shell: bash



      # Utilisation du nouveau tag pour les étapes suivantes
      - name: Use new tag
        if: env.SHOULD_RUN == 'true'
        run: |
          echo "Using new tag ${{ env.NEW_TAG }} for operations"

      # Création de la release GitHub avec l'exécutable
      - name: Create Release
        id: create_release
        if: env.SHOULD_RUN == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }} 
          release_name: Release ${{ env.NEW_TAG }}
          body: "Description of the release"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: env.SHOULD_RUN == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # Cet URL vient d'une étape précédente de création de release
          asset_path: ./dist/main/main.exe
          asset_name: main.exe
          asset_content_type: application/octet-stream
    

